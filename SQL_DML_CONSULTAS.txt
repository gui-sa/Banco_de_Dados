SET SEARCH_PATH TO DELIVERY;

--1)Caso o aplicativo queira checar os dados pessoais de uma pessoa pelo nome:
/*
    Justificativa:
    Quando o cliente quer editar os dados pessoais, ou o aplicativo quer consultar os dados pessoais de um cliente, ele faz uma consulta
*/
--Caso o cliente escolha CONSUMIDOR FAMINTO:
select CF.nome, CF.data_nasc, CF.endereco , CF.endereco_entrega
    from CONSUMIDOR_FAMINTO CF 
    where CF.nome LIKE '%Apolinario%';

--Caso o cliente escolha DONO_DE_NEGOCIO:
select DN.nome, DN.data_nasc, DN.endereco , DN.linkedin
    from DONO_DE_NEGOCIO DN 
    where DN.nome LIKE '%Apolinario%';

--Caso o cliente escolha ENTREGADOR:
select EN.nome, EN.data_nasc, EN.endereco, EN.placa
    from ENTREGADOR EN
    where (EN.nome LIKE 'Rafael Costa%');


--Caso o cliente escolha ANIMADOR:
select EN.nome, AN.nome_artistico, AN.bibliografia , AN.preco
    from ENTREGADOR EN, ANIMADOR AN 
    where     (EN.ID = AN.ID) AND
            (EN.nome LIKE 'Rafael Coelho%');



--2)Qual a bandeira do cartão mais utilizada no ano de 2015?
/*
Justificativa: 
	Bandeiras distintas significam percentuais de comissão distintos. É uma ideia legal, que o aplicativo busque parcerias com bandeiras mais utilizadas. O ano em específico seria para colocar validade na informação coletada. Neste caso, o aplicativo usaria a informação para maximizar custos em 2016, por exemplo.
*/
select pe.bandeira, count(pe.bandeira)
	from PEDIDO PE
	where (pe.bandeira is not null) AND
			(pe.data > '2014-12-30') AND
			(pe.data < '2016-01-01')
	group by pe.bandeira
	order by pe.bandeira desc
	limit 1



--3)Quais os quatro sabores de pizza mais pedido na pizzaria do dono que começa por "Jose da Sil...""?
/*
Justificativa: 
	Essa consulta permite o dono da pizzaria consultar suas pizzas mais vendidas apenas digitando seu nome ou parte dele.
*/


SELECT DISTINCT(TP.nome_p), COUNT(TP.nome_p)
FROM TEM_P TP, PIZZARIA PIZ, DONO_DE_NEGOCIO DN, PIZZA PI
WHERE DN.nome LIKE 'Jose da Sil%'
AND DN.ID=PIZ.ID
AND PIZ.CNPJ=PI.CNPJ
AND TP.CNPJ=PI.CNPJ
AND TP.nome_p=PI.nome
GROUP BY TP.nome_p
ORDER BY COUNT(TP.nome_p) DESC
LIMIT 4;



--4)Quais os cinco clientes mais rentáveis?
/*
Justificativa: 
	O aplicativo pode buscar manter uma lista de clientes “rentaveis”. Essa lista é importante pois ajuda na manutenção dos clientes: os clientes mais rentáveis podem ganhar cupons e vales. Cupons e vales ajudam a manter a fidelidade do cliente.
*/
SELECT CF.nome, CF.ID, SUM(custo_total)
	FROM PEDIDO PE, CONSUMIDOR_FAMINTO CF
	WHERE CF.ID = PE.ID_F
	GROUP BY CF.nome, CF.ID
	ORDER BY SUM(custo_total) DESC
	LIMIT 5;





--5)Quais as pizzas (com sua categoria) e os preços que são servidas na pizzaria de CNPJ x?
/*
Justificativa: 
	Essa consulta é o cardápio da pizzaria de CNPJ X, que será mostrada ao usuário ao consultar a pizzaria.
	No exemplo, X é o CNPJ 15.345.658/0001-42
	
*/
CREATE VIEW CARDAPIO_PIZZAS_15345658000142 AS 
select PI.nome, CAT.descricao, PI.preco
	from PIZZA PI, CATEGORIA CAT
	where (PI.CNPJ = '15.345.658/0001-42') AND
			(PI.codigo_num_filho = CAT.codigo_num_filho);
			
select * from CARDAPIO_PIZZAS_15345658000142;


--6)Qual pizzaria apresenta maior faturamento?
/*
Justificativa: 
	Essa informação é importante para que o aplicativo faça manutenção dos usários donos. As pizzarias que vendem bastante pelo aplicativo, merecem aparecer primeiro na busca por pizzarias.
*/
SELECT TP.CNPJ, SUM(custo_total) 
	FROM PEDIDO PE, TEM_P TP
	WHERE (PE.ID = TP.ID)
	GROUP BY TP.CNPJ
	ORDER BY SUM(custo_total) DESC
	LIMIT 1;


--7)Qual a média do tempo de espera nos estabelecimentos?
/*
Justificativa: O cliente pode saber a média de tempo que o estabelecimento demora para entregar o pedido antes de fazê-lo.
	
*/
SELECT TP.CNPJ, AVG(PE.horario_entrega - PE.horario) AS tempo_de_espera
FROM PEDIDO PE, TEM_P TP
WHERE PE.ID = TP.ID
GROUP BY TP.CNPJ;




--8)Listar pizza, acompanhamento, ingredientes e animador com seu determinado custo para um pedido. Gerando um recibo
--OBS: É necessário que a SP - custo total tenha rodado anterior à esta consulta
--OBS2: Neste caso, o recibo foi feito para um exemplar pedido de ID = 8.
/*
Justificativa: 
	Recibo: resumo de todos os itens com seus determinados preços
*/
select PI.nome as nome, PI.preco as preco
	from PIZZA PI, TEM_P TP, PEDIDO PE
	where 	(PI.CNPJ = TP.CNPJ) AND--juncao PIZZA com tem_p
			(PI.nome = TP.nome_p) AND
			(PE.ID = TP.ID) AND--juncao tem_p com pedido
			(PE.ID = 8)
union
select AC.nome ||'(x '|| TA.quantidade ||')' as nome, TA.quantidade*AC.preco as preco
	from ACOMPANHAMENTO AC, TEM_A TA, PEDIDO PE
	where 	(AC.CNPJ = TA.CNPJ) AND--juncao ACOMPANHAMENTO com tem_A
			(AC.codigo = TA.codigo) AND
			(PE.ID = TA.ID) AND--juncao tem_A com pedido
			(PE.ID = 8)
union
select IE.nome ||'>>'|| PI.nome as nome, IE.preco as preco
	from INGREDIENTE_EXTRA IE, PARA PA, PEDIDO PE, PIZZA PI
	where 	(IE.ID = PA.ID_I) AND--juncao INGREDIENTE_EXTRA
			(PE.ID = PA.ID_P) AND--juncao tem_A com pedido
			(PI.nome = PA.nome_p) AND
			(PI.CNPJ = PA.CNPJ) AND
			(PE.ID = 8)
union
select 'Animador -'|| AN.nome_artistico as nome, AN.preco*PEE.duracao as preco
	from PEDIDO PE, PEDIDO_ENTRETENIMENTO PEE, ANIMADOR AN
	where 	(PEE.ID = PE.ID) AND
			(PEE.ID_E = AN.ID) AND
			(PE.ID = 8)
union
select 'Total' as nome, PE.custo_total as preco
	from PEDIDO PE
	where (PE.ID = 8)
order by preco asc



--9) O ranking das formas de pagamento que geraram maior fluxo de caixa no primeiro semestre de 2015
/*
Justificativa: 
	Um indicativo para o aplicativo saber qual a tendencia de pagamento, e desta forma, facilitar ou melhorar o serviço que mais agrega resultado.
*/
SELECT PE.nome_fp, SUM(PE.custo_total)
FROM PEDIDO PE
WHERE (PE.nome_fp IS NOT NULL) AND
			(PE.data >= '2015-01-01') AND
			(PE.data < '2015-07-01')
GROUP BY PE.nome_fp
ORDER BY SUM(PE.custo_total) DESC;


--10)Quais os nomes dos entregadores que atendem aos finais de semana?
/*
Justificativa: 
	As pizzarias podem entrar em contato com o entregador para possívelmente sanar a demanda de entregas.
*/
SELECT DISTINCT(EN.nome)
	FROM DISPONIBILIDADE DI, ENTREGADOR EN, TRABALHA TR, ANIMADOR AN
	WHERE (DI.ID_E = TR.ID_E) AND (TR.ID_E = AN.ID) AND (AN.ID = EN.ID) AND (
	(DI.dia = 'sabado') OR (DI.dia = 'domingo'));